import asyncio
import logging
import random
import string
import hashlib

from sqlalchemy import ForeignKey
from aiogram import Dispatcher

logger = logging.getLogger(__name__)


def generate_promocode(tg_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ tg_id"""
    hash_part = hashlib.md5(str(tg_id).encode()).hexdigest()[:4]
    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    return f"SAFE-{hash_part}-{random_part}"


def camel_case_to_snake(input_str: str) -> str:
    chars = []
    for c_idx, char in enumerate(input_str):
        if c_idx and char.isupper():
            nxt_idx = c_idx + 1
            flag = nxt_idx >= len(input_str) or input_str[nxt_idx].isupper()
            prev_char = input_str[c_idx - 1]
            if prev_char.isupper() and flag:
                pass
            else:
                chars.append('_')
        chars.append(char.lower())
    return ''.join(chars)


def fk(reference: type, column: str = "id") -> ForeignKey:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ForeignKey, –∏—Å–ø–æ–ª—å–∑—É—è `camel_case_to_snake` –¥–ª—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è."""
    table_name = camel_case_to_snake(reference.__name__)
    return ForeignKey(f"{table_name}s.{column}")


def get_user_achievement_text(achievement_number: int, achievement_list: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É."""
    received = []
    not_received = []

    for i in range(1, len(achievement_list) + 1):
        achievement_text = achievement_list[i].split(" (")[0]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–æ (—á–∏—Å–ª–æ/10)
        if i <= achievement_number:
            received.append(achievement_text)
        else:
            not_received.append(achievement_text)

    return f"–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {achievement_number} –∏–∑ 10\n\n" \
           f"–ü–æ–ª—É—á–µ–Ω—ã:\n" + "\n".join(received) + "\n\n" \
           f"–ù–µ –ø–æ–ª—É—á–µ–Ω—ã:\n" + "\n".join(not_received)


async def on_shutdown(dispatcher: Dispatcher, poll_task: asyncio.Task):
    logging.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    if not poll_task.done():
        logging.info("‚ùå –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É poll_unpaid_payments.")
        poll_task.cancel()

    try:
        await poll_task
    except asyncio.CancelledError:
        logging.info("–ó–∞–¥–∞—á–∞ poll_unpaid_payments –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î...")
    await dispatcher.workflow_data["db_helper"].dispose()
    logging.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")