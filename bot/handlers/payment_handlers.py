import os
import uuid
import asyncio
import logging
from datetime import datetime, timezone

from aiogram import Router, F
from aiogram.types import CallbackQuery,  FSInputFile, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from yookassa import Payment, Configuration
from dotenv import load_dotenv

from templates import PAYMENT_TEXT
from keyboards.payment_kb import get_payment_url_kb, get_payment_menu_kb
from database.requests import set_user_action, save_payment, check_payment_status, check_promocode_is_active
from handlers.states import PaymentState
from handlers.common_handlers import show_main_menu
from handlers.checking_handlers import show_pay_check_menu


load_dotenv()
pay_router = Router()
logger = logging.getLogger(__name__)

Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

payment_id = uuid.uuid4()


async def create_payment(amount: float, tg_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa"""
    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url":"https://t.me/test_antiugon_telegram_bot"
        },
        "capture": True,
        "description": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {tg_id}",
        "metadata": {
            "user_id": tg_id
        }
    })

    return payment.id, payment.confirmation.confirmation_url


async def wait_for_payment(message: Message,
                           session: AsyncSession,
                           state: FSMContext,
                           tg_id: int,
                           payment_id: str,
                           timeout: int = 300):

    start_time = datetime.now(timezone.utc).timestamp()

    while True:
        current_state = await state.get_state()
        if current_state != PaymentState.waiting_for_payment.state:
            logger.info(f"[FSM] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø–æ–∫–∏–Ω—É–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.")
            return
        current_time = datetime.now(timezone.utc).timestamp()
        if current_time - start_time > timeout:
            await message.answer("‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            await state.clear()
            await show_main_menu(message, tg_id, session)
            logger.info(f"[FSM] –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è user_id={tg_id}. –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        await asyncio.sleep(5)
        status = await check_payment_status(session, payment_id)

        if status == "succeeded":
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            await state.clear()
            await show_pay_check_menu(message, tg_id, session)
            return
        else:
            logger.info(f"[FSM] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={tg_id}...")


@pay_router.callback_query(F.data == "payments")
async def payment_to_ukassa(callback: CallbackQuery,
                            session: AsyncSession,
                            ):
    """–û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É"""
    tg_id = callback.from_user.id
    price = 149 if await check_promocode_is_active(session, tg_id) else 199
    await set_user_action(session, tg_id, 'pay')
    await callback.message.answer_photo(
        "AgACAgIAAxkBAAIIDGgN6ZUaszi8Wx664xiU7eaC_0dQAALa5jEbWT5xSF8ycevT81CSAQADAgADeQADNgQ",
        caption=PAYMENT_TEXT.format(price=price),
        reply_markup=get_payment_menu_kb(price),
        parse_mode='HTML'
    )

    await callback.answer(show_alert=False)


@pay_router.callback_query(F.data =="url_ukassa")
async def connection_ukassa(callback: CallbackQuery,
                            session: AsyncSession,
                            state: FSMContext):

    tg_id = callback.from_user.id
    price = 149 if await check_promocode_is_active(session, tg_id) else 199
    await set_user_action(session, tg_id, 'pay_to_ukassa')

    payment_id, payment_url = await create_payment(price, tg_id)
    await save_payment(session, tg_id, payment_id)

    await state.set_state(PaymentState.waiting_for_payment)
    await state.update_data(
        payment_id=payment_id,
        tg_id=tg_id,
        start_time=datetime.now(timezone.utc).timestamp()
    )
    await callback.message.answer(
        text="üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_url_kb(payment_url, price),
        parse_mode="HTML"
    )
    await callback.answer(show_alert=False)

    asyncio.create_task(wait_for_payment(callback.message, session, state, tg_id, payment_id))